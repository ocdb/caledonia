#!/bin/bash

# caledonia
#
# Copyright (C) 2025 ocdb
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

CALEDONIA_NAME="${0##*/}"

CALEDONIA_CALENDAR_LOCATION="${CALEDONIA_CALENDAR_LOCATION:-Calendar}"
CALEDONIA_TIMEFRAME_DEFAULT="${CALEDONIA_TIMEFRAME_DEFAULT:-90}"

CALEDONIA_MSG_INVALID_TIMEFRAME="${CALEDONIA_NAME}: Invalid timeframe. See \"${CALEDONIA_NAME} help\" for valid timeframes."
CALEDONIA_MSG_INVALID_DATE="${CALEDONIA_NAME}: Invalid date."
CALEDONIA_MSG_PROVIDE_SEARCH="${CALEDONIA_NAME}: Please provide a search query."
CALEDONIA_MSG_PROVIDE_TAG="${CALEDONIA_NAME}: Please provide a tag."
CALEDONIA_MSG_NO_RESULTS="${CALEDONIA_NAME}: No results."
CALEDONIA_MSG_INVALID_ENTRY="${CALEDONIA_NAME}: Invalid entry at line %s\n"
CALEDONIA_MSG_INVALID_ENTRIES="${CALEDONIA_NAME}: Invalid entries at lines %s\n"

trim() {
	sed "s/^[[:space:]]*//;s/[[:space:]]*$//"
}

date_field() {
	echo "${1}" | awk -F: '{print $1}' | trim
}

is_range() {
	[[ "${1}" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}[[:space:]]to[[:space:]][0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]
}

date_range() {
	local RANGE_START RANGE_END RANGE_CURRENT

	[[ "${1}" =~ ^([0-9]{4}-[0-9]{2}-[0-9]{2})[[:space:]]to[[:space:]]([0-9]{4}-[0-9]{2}-[0-9]{2})$ ]] || return

	RANGE_START="${BASH_REMATCH[1]}"
	RANGE_END="${BASH_REMATCH[2]}"
	RANGE_CURRENT="${RANGE_START}"

	while [[ "${RANGE_CURRENT}" < "${RANGE_END}" ]] || [[ "${RANGE_CURRENT}" == "${RANGE_END}" ]]; do
		echo "${RANGE_CURRENT}"
		RANGE_CURRENT="$(date --date="${RANGE_CURRENT} +1 day" +%Y-%m-%d 2> "/dev/null")"
	done
}

entry_item() {
	echo "${1}" | awk -F: '{print substr($0, index($0,$2))}' | trim
}

convert_timeframe() {
	local TIMEFRAME_INPUT="${1}"
	local TODAY

	case "${TIMEFRAME_INPUT}" in
		today)
			echo "0"
		;;
		week)
			TODAY="$(date +%Y-%m-%d)"
			WEEK_START="$(date --date="sunday-7 days" +%Y-%m-%d)"
			echo "$(( ( $(date --date="${TODAY}" +%s) - $(date --date="${WEEK_START}" +%s) ) / 86400 + 6 ))"
		;;
		month)
			TODAY="$(date +%Y-%m-%d)"
			MONTH_START="$(date +%Y-%m-01)"
			MONTH_END="$(date --date="${MONTH_START} +1 month -1 day" +%Y-%m-%d)"
			echo "$(( ( $(date --date="${MONTH_END}" +%s) - $(date --date="${TODAY}" +%s) ) / 86400 ))"
		;;
		year)
			TODAY="$(date +%Y-%m-%d)"
			YEAR_END="$(date +%Y-12-31)"
			echo "$(( ( $(date --date="${YEAR_END}" +%s) - $(date --date="${TODAY}" +%s) ) / 86400 ))"
		;;
		*)
			if [[ "${TIMEFRAME_INPUT}" =~ ^[0-9]+d$ ]]; then
				echo "${TIMEFRAME_INPUT%d}"
			elif [[ "${TIMEFRAME_INPUT}" =~ ^[0-9]+w$ ]]; then
				echo "$(( ${TIMEFRAME_INPUT%w} * 7 ))"
			elif [[ "${TIMEFRAME_INPUT}" =~ ^[0-9]+m$ ]]; then
				echo "$(( ${TIMEFRAME_INPUT%m} * 30 ))"
			elif [[ "${TIMEFRAME_INPUT}" =~ ^[0-9]+y$ ]]; then
				echo "$(( ${TIMEFRAME_INPUT%y} * 365 ))"
			elif [[ "${TIMEFRAME_INPUT}" =~ ^[0-9]+$ ]]; then
				echo "${TIMEFRAME_INPUT}"
			else
				echo "${CALEDONIA_MSG_INVALID_TIMEFRAME}" >&2
				exit "1"
			fi
		;;
	esac
}

interval() {
	local DATE_FIELD="${1}"

	if [[ "${DATE_FIELD}" =~ ^([0-9]{4}-[0-9]{2}-[0-9]{2})[[:space:]]\*([0-9]+[dwmy])$ ]]; then
		echo "${BASH_REMATCH[2]}"
	fi
}

valid_date() {
	if ! date --date="${1}" > "/dev/null" 2>&1; then
		echo "invalid"
	fi
}

valid_entry() {
	local ENTRY="${1}"
	local DATE_FIELD ENTRY_ITEM TIME_PART TAGS_PART

	if ! grep --quiet ":" <<< "${ENTRY}"; then
		echo "invalid"
		return
	fi

	DATE_FIELD="$(date_field "${ENTRY}")"
	ENTRY_ITEM="$(entry_item "${ENTRY}")"

	if [[ "${DATE_FIELD}" =~ ^([0-9]{4}-[0-9]{2}-[0-9]{2})[[:space:]]to[[:space:]]([0-9]{4}-[0-9]{2}-[0-9]{2})$ ]]; then
		if [[ "$(valid_date "${BASH_REMATCH[1]}")" == "invalid" ]] || [[ "$(valid_date "${BASH_REMATCH[2]}")" == "invalid" ]]; then
			echo "invalid"
			return
		fi
	elif [[ "${DATE_FIELD}" =~ ^([0-9]{4}-[0-9]{2}-[0-9]{2})[[:space:]]\+([0-9]+[dwmy])$ ]]; then
		if [[ "$(valid_date "${BASH_REMATCH[1]}")" == "invalid" ]]; then
			echo "invalid"
			return
		fi
	elif [[ "${DATE_FIELD}" =~ ^([0-9]{4}-[0-9]{2}-[0-9]{2})[[:space:]]\*([0-9]+[dwmy])$ ]]; then
		if [[ "$(valid_date "${BASH_REMATCH[1]}")" == "invalid" ]]; then
			echo "invalid"
			return
		fi
	elif [[ "${DATE_FIELD}" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
		if [[ "$(valid_date "${DATE_FIELD}")" == "invalid" ]]; then
			echo "invalid"
			return
		fi
	else
		echo "invalid"
		return
	fi

	if grep --quiet "(@ " <<< "${ENTRY_ITEM}"; then
		TIME_PART="$(grep --only-matching "(@ [0-9]\{2\}:[0-9]\{2\} [AP]M)" <<< "${ENTRY_ITEM}")"

		if [[ -z "${TIME_PART}" ]]; then
			echo "invalid"
			return
		fi
	fi

	if grep --quiet "\[" <<< "${ENTRY_ITEM}"; then
		TAGS_PART="$(grep --only-matching "\[.*\]" <<< "${ENTRY_ITEM}")"

		if [[ -z "${TAGS_PART}" ]]; then
			echo "invalid"
			return
		fi

		if ! grep --quiet "^\[\".*\"\]$" <<< "${TAGS_PART}"; then
			echo "invalid"
			return
		fi
	fi
}

convert_date() {
	local DATE_FIELD="${1}"
	local TODAY="${2}"
	local LIMIT="${3}"
	local BASE_DATE INTERVAL DAYS CURRENT DAYS_CONVERTED RANGE_DATE

	if is_range "${DATE_FIELD}"; then
		while IFS= read -r RANGE_DATE; do
			[[ -z "${RANGE_DATE}" ]] && continue
			if [[ "${RANGE_DATE}" < "${TODAY}" ]]; then
				continue
			fi
			if [[ -n "${LIMIT}" ]] && [[ "${RANGE_DATE}" > "${LIMIT}" ]]; then
				continue
			fi
			echo "${RANGE_DATE}"
		done < <(date_range "${DATE_FIELD}")
		return
	fi

	if [[ "${DATE_FIELD}" =~ ^([0-9]{4}-[0-9]{2}-[0-9]{2})[[:space:]]\+([0-9]+[dwmy])$ ]]; then
		BASE_DATE="${BASH_REMATCH[1]}"
		DAYS="${BASH_REMATCH[2]}"
		DAYS_CONVERTED="$(convert_timeframe "${DAYS}")"
		CURRENT="$(date --date="${BASE_DATE} +${DAYS_CONVERTED} days" +%Y-%m-%d 2> "/dev/null")"

		if [[ "${CURRENT}" > "${TODAY}" || "${CURRENT}" == "${TODAY}" ]] && [[ -z "${LIMIT}" || "${CURRENT}" < "${LIMIT}" ]]; then
			echo "${CURRENT}"
		fi
		return
	fi

	if [[ "${DATE_FIELD}" =~ ^([0-9]{4}-[0-9]{2}-[0-9]{2})[[:space:]]\*([0-9]+[dwmy])$ ]]; then
		BASE_DATE="${BASH_REMATCH[1]}"
		INTERVAL="${BASH_REMATCH[2]}"
		DAYS_CONVERTED="$(convert_timeframe "${INTERVAL}")"
		CURRENT="${BASE_DATE}"

		while true; do
			if [[ "${CURRENT}" > "${TODAY}" || "${CURRENT}" == "${TODAY}" ]]; then
				echo "${CURRENT}"
				break
			fi

			CURRENT="$(date --date="${CURRENT} +${DAYS_CONVERTED} days" +%Y-%m-%d 2> "/dev/null")"
		done
		return
	fi

	echo "${DATE_FIELD}"
}

header() {
	printf "\033[1m%-33s %-25s %s\033[0m\n" "Date" "Time" "Item"
}

display_event() {
	local EVENT_DATE="${1}"
	local INTERVAL="${2}"
	local EVENT_ITEM="${3}"

	local EVENT_DAY EVENT_DATE_WITH_DAY
	local EVENT_TIME EVENT_TIME_WITH_UTC LOCAL_TIME SYSTEM_TZ UTC_TIMESTAMP

	EVENT_ITEM="$(sed "s/\[.*\]//g" <<< "${EVENT_ITEM}" | trim)"

	EVENT_DAY="$(date --date="${EVENT_DATE}" +%A 2> "/dev/null")"
	EVENT_DATE_WITH_DAY="${EVENT_DATE} (${EVENT_DAY})"

	EVENT_TIME="$(grep --only-matching "(@ [0-9]\{2\}:[0-9]\{2\} [AP]M)" <<< "${EVENT_ITEM}")"

	if [[ -n "${EVENT_TIME}" ]]; then
		LOCAL_TIME="$(sed "s/[@()]//g" <<< "${EVENT_TIME}" | trim)"
		SYSTEM_TZ="$(date +"%Z")"
		UTC_TIMESTAMP="$(date --utc --date="${EVENT_DATE} ${LOCAL_TIME} ${SYSTEM_TZ}" +"%H:%M UTC" 2> "/dev/null")"
		EVENT_TIME_WITH_UTC="${LOCAL_TIME} (${UTC_TIMESTAMP})"
		EVENT_ITEM="$(sed "s/${EVENT_TIME}//" <<< "${EVENT_ITEM}" | trim)"
	else
		EVENT_TIME_WITH_UTC=""
	fi

	if [[ -n "${INTERVAL}" ]]; then
		printf "\033[35m%s\033[0m \033[97m(*%s)\033[0m%*s \033[37m%-25s\033[0m %s\n" "${EVENT_DATE_WITH_DAY}" "${INTERVAL}" "$((33 - ${#EVENT_DATE_WITH_DAY} - ${#INTERVAL} - 4))" "" "${EVENT_TIME_WITH_UTC}" "${EVENT_ITEM}"
	else
		printf "\033[35m%-33s\033[0m \033[37m%-25s\033[0m %s\n" "${EVENT_DATE_WITH_DAY}" "${EVENT_TIME_WITH_UTC}" "${EVENT_ITEM}"
	fi
}

show_errors() {
	local ERROR_LINES="${1}"
	local ERROR_COUNT

	if [[ -n "${ERROR_LINES}" ]]; then
		ERROR_COUNT="$(grep --only-matching "," <<< "${ERROR_LINES}" | wc --lines)"

		printf "\n"

		if [[ "${ERROR_COUNT}" -eq "1" ]]; then
			printf "${CALEDONIA_MSG_INVALID_ENTRY}" "${ERROR_LINES%,}" >&2
		else
			printf "${CALEDONIA_MSG_INVALID_ENTRIES}" "${ERROR_LINES%,}" >&2
		fi
	fi
}

edit_calendar() {
	pass edit "${CALEDONIA_CALENDAR_LOCATION}"
}

show_events() {
	local TIMEFRAME="${1:-${CALEDONIA_TIMEFRAME_ALL}}"
	local FILTER_START="${2}"
	local FILTER_END="${3}"
	local TODAY LIMIT_DATE DATE_FIELD EXPANDED_DATES EXPANDED_DATE ENTRY_ITEM INTERVAL
	local LINE_NUMBER ERROR_LINES CALENDAR_ENTRY
	local -a EVENTS_TO_DISPLAY

	if [[ -n "${FILTER_START}" ]] && [[ -n "${FILTER_END}" ]]; then
		TODAY="${FILTER_START}"
		LIMIT_DATE="${FILTER_END}"
	else
		TODAY="$(date +%Y-%m-%d)"

		if [[ -z "${TIMEFRAME}" ]]; then
			LIMIT_DATE=""
		else
			LIMIT_DATE="$(date --date "+${TIMEFRAME} days" +%Y-%m-%d)"
		fi
	fi

	LINE_NUMBER="0"
	ERROR_LINES=""
	EVENTS_TO_DISPLAY=()

	while IFS= read -r CALENDAR_ENTRY; do
		LINE_NUMBER="$((LINE_NUMBER + 1))"
		[[ -z "${CALENDAR_ENTRY}" ]] && continue

		if [[ "$(valid_entry "${CALENDAR_ENTRY}")" == "invalid" ]]; then
			ERROR_LINES="${ERROR_LINES}${LINE_NUMBER},"
			continue
		fi

		DATE_FIELD="$(date_field "${CALENDAR_ENTRY}")"
		ENTRY_ITEM="$(entry_item "${CALENDAR_ENTRY}")"
		INTERVAL="$(interval "${DATE_FIELD}")"

		EXPANDED_DATES="$(convert_date "${DATE_FIELD}" "${TODAY}" "${LIMIT_DATE}")"

		while IFS= read -r EXPANDED_DATE; do
			[[ -z "${EXPANDED_DATE}" ]] && continue

			if [[ "${EXPANDED_DATE}" == "${TODAY}" ]] || [[ "${EXPANDED_DATE}" > "${TODAY}" && (-z "${LIMIT_DATE}" || "${EXPANDED_DATE}" < "${LIMIT_DATE}" || "${EXPANDED_DATE}" == "${LIMIT_DATE}") ]]; then
				EVENTS_TO_DISPLAY+=("${EXPANDED_DATE}|${INTERVAL}|${ENTRY_ITEM}")
			fi
		done <<< "${EXPANDED_DATES}"
	done < <(pass show "${CALEDONIA_CALENDAR_LOCATION}")

	if [[ "${#EVENTS_TO_DISPLAY[@]}" -gt "0" ]]; then
		header
		printf "%s\n" "${EVENTS_TO_DISPLAY[@]}" | sort | while IFS="|" read -r EXPANDED_DATE INTERVAL ENTRY_ITEM; do
			display_event "${EXPANDED_DATE}" "${INTERVAL}" "${ENTRY_ITEM}"
		done
	else
		echo "${CALEDONIA_MSG_NO_RESULTS}"
	fi

	show_errors "${ERROR_LINES}"
}

search_events() {
	local SEARCH_INPUT="${1}"
	local DATE_FIELD ENTRY_ITEM EXPANDED_DATES EXPANDED_DATE EVENT_ITEM_CLEAN INTERVAL
	local TODAY LIMIT_DATE LINE_NUMBER ERROR_LINES CALENDAR_ENTRY
	local -a RESULTS

	TODAY="$(date +%Y-%m-%d)"

	if [[ -z "${CALEDONIA_TIMEFRAME_ALL}" ]]; then
		LIMIT_DATE=""
	else
		LIMIT_DATE="$(date --date "+${CALEDONIA_TIMEFRAME_ALL} days" +%Y-%m-%d)"
	fi

	LINE_NUMBER="0"
	ERROR_LINES=""
	RESULTS=()

	while IFS= read -r CALENDAR_ENTRY; do
		LINE_NUMBER="$((LINE_NUMBER + 1))"

		[[ -z "${CALENDAR_ENTRY}" ]] && continue

		if [[ "$(valid_entry "${CALENDAR_ENTRY}")" == "invalid" ]]; then
			ERROR_LINES="${ERROR_LINES}${LINE_NUMBER},"
			continue
		fi

		ENTRY_ITEM="$(entry_item "${CALENDAR_ENTRY}")"
		EVENT_ITEM_CLEAN="$(sed "s/\[.*\]//g" <<< "${ENTRY_ITEM}" | trim)"

		if grep --ignore-case --quiet "${SEARCH_INPUT}" <<< "${EVENT_ITEM_CLEAN}"; then
			DATE_FIELD="$(date_field "${CALENDAR_ENTRY}")"
			INTERVAL="$(interval "${DATE_FIELD}")"

			EXPANDED_DATES="$(convert_date "${DATE_FIELD}" "${TODAY}" "${LIMIT_DATE}")"

			while IFS= read -r EXPANDED_DATE; do
				[[ -z "${EXPANDED_DATE}" ]] && continue
				RESULTS+=("${EXPANDED_DATE}|${INTERVAL}|${ENTRY_ITEM}")
			done <<< "${EXPANDED_DATES}"
		fi
	done < <(pass show "${CALEDONIA_CALENDAR_LOCATION}")

	if [[ "${#RESULTS[@]}" -gt "0" ]]; then
		header
		printf "%s\n" "${RESULTS[@]}" | sort | while IFS="|" read -r EXPANDED_DATE INTERVAL ENTRY_ITEM; do
			display_event "${EXPANDED_DATE}" "${INTERVAL}" "${ENTRY_ITEM}"
		done
	else
		echo "${CALEDONIA_MSG_NO_RESULTS}"
	fi

	show_errors "${ERROR_LINES}"
}

filter_tagged() {
	local TAGS="${1}"
	local CLEAN_TAGS TAG_ARRAY EVENT_TAGS MATCH_FOUND TAG
	local DATE_FIELD ENTRY_ITEM EXPANDED_DATES EXPANDED_DATE INTERVAL
	local TODAY LIMIT_DATE LINE_NUMBER ERROR_LINES CALENDAR_ENTRY
	local -a RESULTS

	TODAY="$(date +%Y-%m-%d)"

	if [[ -z "${CALEDONIA_TIMEFRAME_ALL}" ]]; then
		LIMIT_DATE=""
	else
		LIMIT_DATE="$(date --date "+${CALEDONIA_TIMEFRAME_ALL} days" +%Y-%m-%d)"
	fi

	CLEAN_TAGS="${TAGS// /}"
	IFS="," read -ra TAG_ARRAY <<< "${CLEAN_TAGS}"

	LINE_NUMBER="0"
	ERROR_LINES=""
	RESULTS=()

	while IFS= read -r CALENDAR_ENTRY; do
		LINE_NUMBER="$((LINE_NUMBER + 1))"

		[[ -z "${CALENDAR_ENTRY}" ]] && continue

		if [[ "$(valid_entry "${CALENDAR_ENTRY}")" == "invalid" ]]; then
			ERROR_LINES="${ERROR_LINES}${LINE_NUMBER},"
			continue
		fi

		EVENT_TAGS="$(grep --only-matching "\[.*\]" <<< "${CALENDAR_ENTRY}" | sed "s/^\[//;s/\]$//")"

		MATCH_FOUND="true"

		for TAG in "${TAG_ARRAY[@]}"; do
			if ! grep --quiet "\"${TAG}\"" <<< "${EVENT_TAGS}"; then
				MATCH_FOUND="false"
				break
			fi
		done

		if [[ "${MATCH_FOUND}" == "true" ]]; then
			DATE_FIELD="$(date_field "${CALENDAR_ENTRY}")"
			ENTRY_ITEM="$(entry_item "${CALENDAR_ENTRY}")"
			INTERVAL="$(interval "${DATE_FIELD}")"

			EXPANDED_DATES="$(convert_date "${DATE_FIELD}" "${TODAY}" "${LIMIT_DATE}")"

			while IFS= read -r EXPANDED_DATE; do
				[[ -z "${EXPANDED_DATE}" ]] && continue
				RESULTS+=("${EXPANDED_DATE}|${INTERVAL}|${ENTRY_ITEM}")
			done <<< "${EXPANDED_DATES}"
		fi
	done < <(pass show "${CALEDONIA_CALENDAR_LOCATION}")

	if [[ "${#RESULTS[@]}" -gt "0" ]]; then
		header
		printf "%s\n" "${RESULTS[@]}" | sort | while IFS="|" read -r EXPANDED_DATE INTERVAL ENTRY_ITEM; do
			display_event "${EXPANDED_DATE}" "${INTERVAL}" "${ENTRY_ITEM}"
		done
	else
		echo "${CALEDONIA_MSG_NO_RESULTS}"
	fi

	show_errors "${ERROR_LINES}"
}

show_help() {
	printf "Usage: %s [command] [options]\n\n" "${CALEDONIA_NAME}"
	printf "Commands:\n"
	printf "	edit				Edit calendar\n"
	printf "	show [timeframe]		Show entries\n"
	printf "	show <date> <date>		Show entries between dates\n"
	printf "	search <query>			Search entries\n"
	printf "	tags <tags>			Filter entries by tags\n"
	printf "	help				Show this help message\n"
	printf "\n"
	printf "Timeframes:\n"
	printf "	today				Current day\n"
	printf "	week				Current week\n"
	printf "	month				Current month\n"
	printf "	year				Current year\n"
	printf "	N[dwmy]				Number of (d)ays, (w)eeks, (m)onths, or (y)ears\n"
	printf "\n"
	printf "Format:\n"
	printf "	Event				YYYY-MM-DD: (@ HH:MM AM/PM) Item [\"tag\", \"tag\"]\n"
	printf "	Range				YYYY-MM-DD to YYYY-MM-DD: (@ HH:MM AM/PM) Item [\"tag\", \"tag\"]\n"
	printf "	Relative			YYYY-MM-DD +N[dwmy]: (@ HH:MM AM/PM) Item [\"tag\", \"tag\"]\n"
	printf "	Recurring			YYYY-MM-DD *N[dwmy]: (@ HH:MM AM/PM) Item [\"tag\", \"tag\"]\n"
	printf "\n"
	printf "Environment variables:\n"
	printf "	CALEDONIA_CALENDAR_LOCATION	Calendar location in pass (default \"Calendar\")\n"
	printf "	CALEDONIA_TIMEFRAME_DEFAULT	Default timeframe (default \"90\")\n"
}

case "${1}" in
	"")
		TIMEFRAME="$(convert_timeframe "${CALEDONIA_TIMEFRAME_DEFAULT}")"
		show_events "${TIMEFRAME}"
	;;
	edit)
		edit_calendar
	;;
	show)
		if [[ -n "${2}" ]] && [[ -n "${3}" ]]; then
			if [[ "${2}" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] && [[ "${3}" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
				if [[ "$(valid_date "${2}")" == "invalid" ]] || [[ "$(valid_date "${3}")" == "invalid" ]]; then
					echo "${CALEDONIA_MSG_INVALID_DATE}" >&2
					exit "1"
				fi
				show_events "" "${2}" "${3}"
			else
				echo "${CALEDONIA_MSG_INVALID_TIMEFRAME}" >&2
				exit "1"
			fi
		elif [[ -n "${2}" ]]; then
			TIMEFRAME="$(convert_timeframe "${2}")"
			show_events "${TIMEFRAME}"
		else
			show_events "${CALEDONIA_TIMEFRAME_ALL}"
		fi
	;;
	search)
		if [[ -n "${2}" ]]; then
			search_events "${2}"
		else
			echo "${CALEDONIA_MSG_PROVIDE_SEARCH}"
		fi
	;;
	tags)
		if [[ -n "${2}" ]]; then
			filter_tagged "${2}"
		else
			echo "${CALEDONIA_MSG_PROVIDE_TAG}"
		fi
	;;
	help)
		show_help
	;;
	*)
		show_help
	;;
esac
